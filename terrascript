#!/usr/bin/env bash
set -euo pipefail

TERRASCRIPT_VERSION=v0.1.5
TF_BIN="${TF_BIN:-/usr/local/bin/terraform}"
TF_PLUGIN_CACHE_DIR="${TF_PLUGIN_CACHE_DIR:-/tmp/terraform/plugin-cache}"

ERRORS=()
ARGUMENT=none
ERROR_MARK=none

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

trap exit_handler EXIT

# Import terrascript library for required functions.
# The terrascript library is installed to /opt/terrascript/lib in
# production (see build/Dockerfile)
# Disabling shellcheck following files as the full path would be required.
# shellcheck disable=SC1090,SC2046
if [ -d "/opt/terrascript/lib" ]; then
  for lib in /opt/terrascript/lib/*.sh; do
    source "${lib}"
  done
elif [ -f "${script_dir}/lib/util.sh" ]; then
  for lib in "${script_dir}"/lib/*.sh; do
    source "${lib}"
  done
fi

# shellcheck disable=SC2034
setup_colors() {
  # if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
  # disable checking file descriptor (fd) since terrascript intended to be run on docker environment
  if [[ -z "${NO_COLOR-}" ]]; then
    NC='\033[0m'
    WHITE='\033[1;97m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    LGREEN='\033[1;92m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    YELLOW='\033[1;33m'
    LYELLOW='\033[1;93m'
  else
    NC=''
    WHITE=''
    RED=''
    GREEN=''
    LGREEN=''
    ORANGE=''
    BLUE=''
    PURPLE=''
    CYAN=''
    YELLOW=''
    LYELLOW=''
  fi
}

msg() {
  echo -e "$*" >&2
}

die() {
  local msg=$1
  local code=101
  msg "error: $msg"
  return "$code"
}

exit_handler() {
  RC=$?
  trap - EXIT

  case $ERROR_MARK in
    dependency)
      for e in "${ERRORS[@]}"; do
        msg "terrascript: missing ${RED}${e##*/}${NC} command"
      done
    ;;
    runtime)
      msg "terrascript: abort, caught resources failed on terraform execution:"
      for e in "${ERRORS[@]}"; do
        msg "${PURPLE}❯${NC} ${RED}${e}${NC}"
      done
    ;;
  esac
  exit $RC
}

parse_params() {
  if [[ $# -eq 0 ]]; then
    usage
  fi

  while [[ $# -gt 0 ]]; do
    case $1 in
      -h | --help) usage ;;
      -v | --verbose) set -x ;;
      -nc | --no-color) NO_COLOR=1 ;;
      -?*) die "unknown option '$1'" ;;
      *) break ;;
    esac
    shift
  done

  ARGUMENT=$1
}

command_check() {
  for cmd in "$@"; do
    if type "${cmd}" >/dev/null 2>&1 || [[ -x "${cmd}" ]]; then
      continue
    fi
    ERRORS+=("${cmd}")
  done

  if [ ${#ERRORS[@]} -ne 0 ]; then
    ERROR_MARK=dependency
    return 99
  fi
}

########################################################

show_version() {
  printf "Terrascript Version: %s\n" "${TERRASCRIPT_VERSION}" >&2
  printf "Git Commit: %s\n" "${GIT_COMMIT:-dev}" >&2
}

show_figlet() {
  cat <<EOF
 _______                                _       _
|__   __|                              (_)     | |
   | | ___ _ __ _ __ __ _ ___  ___ _ __ _ _ __ | |_
   | |/ _ \ '__| '__/ _\` / __|/ __| '__| | '_ \| __|
   | |  __/ |  | | | (_| \__ \ (__| |  | | |_) | |_
   |_|\___|_|  |_|  \__,_|___/\___|_|  |_| .__/ \__|
                                         | |
                                         |_|
EOF
}

usage() {
  cat <<EOF
$(show_figlet)

Terrascript is a thin wrapper of Terraform that have ability to be aware with changes on a git local-repository

Terrascript is able to discover your terraform task on your git local-repository using "git-diff" triple-dot approach,
and check the terraform task in one of following condition:
* Added
* Modified/Renamed
* Deleted

Usage:
  $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-nc] COMMAND

Available Commands:
  validate     : do terraform validate with more power
  plan         : do terraform plan with more power
  apply        : do terraform apply with more power
  version      : show terrascript version

Available Options:
  -h,  --help        : Print this help and exit
  -v,  --verbose     : Print script debug info
  -nc, --no-color    : Disables colour output

Available Environment Variables:
  \$TF_BIN                    : is a terraform binary path location, MUST be executable otherwise resulting non-zero status code. Default to "${TF_BIN}".
  \$TF_PREVIOUS_HEAD          : is a previous head commit to be compared with current branch head commit. Default to "HEAD^1", consider this as required.
  \$TF_BACKEND                : is a terraform backend provider. Default to "aws".
  \$TF_BACKEND_BUCKET         : is a terraform backend bucket. (required)
  \$TF_BACKEND_DYNAMODB_TABLE : is a terraform backend dynamodb table as terraform-lock storage. (required)
  \$TF_ASSIGNERS              : is a base64-encoded string that contains a list of assigners (separated by newline) that able to execute terrascript.
  \$TF_PLUGIN_CACHE_DIR       : is a terraform plugin cache dir based on official docs. Default to "${TF_PLUGIN_CACHE_DIR}".
EOF
  exit
}

main() {
  parse_params "$@"
  setup_colors

  command_check "git" "${TF_BIN}"

  case $ARGUMENT in
    validate) run "validate" ;;
    plan) run "plan" ;;
    apply) run "apply" ;;
    version) show_version ;;
    *) msg "terrascript: ${YELLOW}'$ARGUMENT'${NC} is not terrascript command. See 'terrascript --help'"; return 99 ;;
  esac
}

main "$@"
