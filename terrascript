#!/bin/bash

set -euo pipefail

PREVIOUS_HEAD=${TF_PREVIOUS_HEAD:-`git rev-parse HEAD^1`}

TF_PLANFILE=/tmp/target.tfplan
TF_BIN=${TF_BIN:-/usr/local/bin/terraform}
TF_INIT="$TF_BIN init"
TF_VALIDATE="$TF_BIN validate"
TF_PLAN="$TF_BIN plan -out $TF_PLANFILE"
TF_APPLY="$TF_BIN apply $TF_PLANFILE"

RED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[1;32m'
BLUE='\033[1;34m'
LGREEN='\033[1;92m'
LYELLOW='\033[1;93m'
WHITE='\033[1;97m'
NC='\033[0m'

function usage() {
SELF="terrascript"

cat <<EOF
Terrascript is a custom built script for maintaining your git repository to be able
work with Terraform under git perfectly

Terrascript perform to scan your git repository which MUST in the one of following condition:
* ADDED
* MODIFIED
* DELETED

USAGE:

  $SELF validate     : basically terraform validate with more power
  $SELF plan         : basically terraform plan with more power
  $SELF apply        : basically terraform apply with more power

  $SELF -h,--help    : show this message
EOF
}

function select_backend(){

    if [ $1 == "aws" ]
    then
        export TF_BACKEND_CONFIG="-backend-config=\"bucket=\$TF_BACKEND_BUCKET\""
        export TF_BACKEND_CONFIG+=" -backend-config=\"dynamodb_table=\$TF_BACKEND_DYNAMODB_TABLE\""
        export TF_BACKEND_CONFIG+=" -backend-config=\"key=\$TF_BACKEND_STATE\""
    elif [ $1 == "gcs" ]
    then
        export TF_BACKEND_CONFIG="-backend-config=\"bucket=\$TF_BACKEND_BUCKET\""
        export TF_BACKEND_CONFIG+=" -backend-config=\"prefix=\$TF_BACKEND_STATE\""
    fi
}

function assigner_check(){
    assigner=$(echo $TF_ASSIGNERS | base64 -d)

    if [ ! $(grep $GITLAB_USER_LOGIN <<< $assigner) ]; then
        echo -e "${WHITE}-------------------------------------${NC}"
        echo -e "${RED}WHOOPS! You are not allowed to run this operation${NC}"
        echo -e "${WHITE}-------------------------------------${NC}"
        printf "\n\n"
        echo -e "${WHITE}Please contact one of the repository maintainers below:${NC}"
        echo -e "${WHITE}$assigner${NC}"
        printf "\n\n"
        exit 1
    fi

}

function setup(){
    BASEDIR=$PWD
    REPOSITORY_NAME=$(basename `git rev-parse --show-toplevel`)
    CACHE_DIR=${TF_PLUGIN_CACHE_DIR:-/tmp/terraform/plugin-cache}
    CACHE_DIR=$(mkdir -p ${CACHE_DIR}; echo ${CACHE_DIR})

    CURRENT_HEAD=$(git rev-parse HEAD)

    # Perform scanning into repository for any changes in one of the following states
    # Added, Modified, Renamed, and Deleted
    TF_ADDED_DIRS=$(git --no-pager diff ${PREVIOUS_HEAD} ${CURRENT_HEAD} --dirstat=files,0,cumulative --diff-filter=A -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
    TF_MODIFIED_DIRS=$(git --no-pager diff ${PREVIOUS_HEAD} ${CURRENT_HEAD} --dirstat=files,0,cumulative --diff-filter=MR -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
    TF_DELETED_DIRS=$(git --no-pager diff ${PREVIOUS_HEAD} ${CURRENT_HEAD} --dirstat=files,0,cumulative --diff-filter=D -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')

    # Select backend and forming -backend-config arguments for terraform
    select_backend "${TF_BACKEND:-aws}"

    if [ ! -z "$TF_ADDED_DIRS" ]; then

        echo -e "${BLUE}Terraform resources on $REPOSITORY_NAME\n${NC}"

        echo -e "${WHITE}-------------------------------------${NC}"
        echo -e "${YELLOW}[ADDED]${NC} Terraform resources list:"
        echo -e "${WHITE}-------------------------------------\n${NC}"

        for tfpath in $TF_ADDED_DIRS
        do
            dir_with_files=$(find $BASEDIR/$tfpath -maxdepth 1 -type f 2>/dev/null)
            if [ ! -z "$dir_with_files" ]; then

                echo -e "${BLUE}[START]${NC} ${WHITE}Starting Terraform task at${NC} ${LYELLOW}$tfpath\n${NC}"

                bash -c "
                    export TF_BACKEND_STATE=${tfpath%\/}/terraform.tfstate
                    export TF_PLUGIN_CACHE_DIR=$CACHE_DIR

                    cd $BASEDIR/$tfpath
                    sleep 1

                    $TF_INIT $TF_BACKEND_CONFIG
                    sleep 1

                    if [ $1 == "validate" ]; then
                        $TF_VALIDATE
                    elif [ $1 == "plan" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN
                    elif [ $1 == "apply" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN
                        sleep 5
                        $TF_APPLY
                    fi
                "

                echo -e "${BLUE}[DONE]${NC} ${WHITE}Terraform task at ${LYELLOW}$tfpath\n${NC} is completed\n${NC}"

            fi
        done
    fi

    if [ ! -z "$TF_MODIFIED_DIRS" ]; then

        echo -e "${BLUE}Terraform resources on $REPOSITORY_NAME\n${NC}"

        echo -e "${WHITE}-------------------------------------${NC}"
        echo -e "${GREEN}[MODIFIED]${NC} Terraform resources list:"
        echo -e "${WHITE}-------------------------------------\n${NC}"

        for tfpath in $TF_MODIFIED_DIRS
        do
            dir_with_files=$(find $BASEDIR/$tfpath -maxdepth 1 -type f 2>/dev/null)
            if [ ! -z "$dir_with_files" ]; then

                echo -e "${BLUE}[START]${NC} ${WHITE}Starting Terraform task at${NC} ${LYELLOW}$tfpath\n${NC}"

                bash -c "
                    export TF_BACKEND_STATE=${tfpath%\/}/terraform.tfstate
                    export TF_PLUGIN_CACHE_DIR=$CACHE_DIR

                    cd $BASEDIR/$tfpath
                    sleep 1

                    $TF_INIT $TF_BACKEND_CONFIG
                    sleep 1

                    if [ $1 == "validate" ]; then
                        $TF_VALIDATE
                    elif [ $1 == "plan" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN
                    elif [ $1 == "apply" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN
                        sleep 5
                        $TF_APPLY
                    fi
                "

                echo -e "${BLUE}[DONE]${NC} ${WHITE}Terraform task at ${LYELLOW}$tfpath\n${NC} is completed\n${NC}"

            fi
        done

    fi

    if [ ! -z "$TF_DELETED_DIRS" ]; then

        echo -e "${BLUE}Terraform resources on $REPOSITORY_NAME\n${NC}"

        echo -e "${WHITE}-------------------------------------${NC}"
        echo -e "${RED}[DELETED]${NC} Terraform resources list:"
        echo -e "${WHITE}-------------------------------------\n${NC}"

        git checkout ${PREVIOUS_HEAD} > /dev/null 2>&1

        for tfpath in $TF_DELETED_DIRS
        do
            dir_with_files=$(find $BASEDIR/$tfpath -maxdepth 1 -type f 2>/dev/null)
            if [ ! -z "$dir_with_files" ]; then

                echo -e "${BLUE}[START]${NC} ${WHITE}Starting Terraform task at${NC} ${LYELLOW}$tfpath\n${NC}"

                bash -c "
                    export TF_BACKEND_STATE=${tfpath%\/}/terraform.tfstate
                    export TF_PLUGIN_CACHE_DIR=$CACHE_DIR

                    cd $BASEDIR/$tfpath
                    sleep 1

                    $TF_INIT $TF_BACKEND_CONFIG
                    sleep 1

                    if [ $1 == "validate" ]; then
                        $TF_VALIDATE
                    elif [ $1 == "plan" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN -destroy
                    elif [ $1 == "apply" ]; then
                        $TF_VALIDATE
                        sleep 1
                        $TF_PLAN -destroy
                        sleep 5
                        $TF_APPLY
                    fi
                "
                echo -e "${BLUE}[DONE]${NC} ${WHITE}Terraform task at ${LYELLOW}$tfpath\n${NC} is completed\n${NC}"

            fi
        done

        git checkout $CURRENT_HEAD > /dev/null 2>&1
    fi

}

function main(){
    local CONTINUE
    CONTINUE=1

    if [ -z $TF_BIN ]; then
        echo -e "${RED} Terraform/Terragrunt not exist ${NC}"
    else
        CHOICE=${1:-''}
        if [[ "$CHOICE" == "validate" ]]; then
            setup "validate"
            CONTINUE=0
        elif [[ "$CHOICE" == "plan" ]]; then
            setup "plan"
            CONTINUE=0
        elif [[ "$CHOICE" == "apply" ]]; then
            assigner_check
            setup "apply"
            CONTINUE=0
        elif [[ "$CHOICE" == "--help" || "$CHOICE" == "-h" ]]; then
            usage
            CONTINUE=0
        elif [[ "$#" -gt 0 ]]; then
            echo -e "${WHITE}-------------------------------------${NC}"
            echo -e "${RED}WHOOPS! Terascript argument '$CHOICE'${NC}"
            echo -e "${RED}is not available yet!"${NC}
            echo -e "${WHITE}-------------------------------------${NC}"
            printf "\n\n"

            usage
        else
            echo -e "${WHITE}-------------------------------------${NC}"
            echo -e "${RED}ERROR! Terascript argument needed!"${NC}
            echo -e "${WHITE}-------------------------------------\n${NC}"

            usage
        fi
    fi

    exit $CONTINUE
}

main $@