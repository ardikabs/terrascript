#!/bin/bash
TERRASCRIPT_VERSION=v0.1.5
TF_BIN="${TF_BIN:-/usr/local/bin/terraform}"

set -euo pipefail

ERRORS=()

readonly RED='\033[1;31m'
readonly YELLOW='\033[1;33m'
readonly GREEN='\033[1;32m'
readonly BLUE='\033[1;34m'
readonly LGREEN='\033[1;92m'
readonly LYELLOW='\033[1;93m'
readonly WHITE='\033[1;97m'
readonly NC='\033[0m'

err () {
  echo -e "[${RED}ERROR${NC}]: $*" >&2
}

command_check() {
  for cmd in "$@"; do
    if type "${cmd}" >/dev/null 2>&1 || [[ -x "${cmd}" ]]; then
      continue
    fi
    ERRORS+=("${cmd}")
  done

  if [ ${#ERRORS[@]} -ne 0 ]; then
    for e in "${ERRORS[@]}"; do
      err "missing ${RED}${e##*/}${NC} command"
    done
    exit 1
  fi
}

show_version() {
  printf "Terrascript Version: %s\n" "${TERRASCRIPT_VERSION}"
  printf "Git Commit: %s\n" "${GIT_COMMIT:-dev}"
}

print_line() {
  local length=$1
  echo -ne "${BLUE}"
  for _ in $(seq "${length}"); do echo -n "="; done
  echo -ne "${NC}\n"
}

show_title_setup() {
  local title="$1"
  local repo="$2"

  local length_title
  length_title="$title ($repo)"

  print_line "${#length_title}"
  echo -e "${title} (${LYELLOW}${repo}${NC})"
  print_line "${#length_title}"

  echo ""
}

show_figlet() {
  cat <<EOF
 _______                                _       _
|__   __|                              (_)     | |
   | | ___ _ __ _ __ __ _ ___  ___ _ __ _ _ __ | |_
   | |/ _ \ '__| '__/ _\` / __|/ __| '__| | '_ \| __|
   | |  __/ |  | | | (_| \__ \ (__| |  | | |_) | |_
   |_|\___|_|  |_|  \__,_|___/\___|_|  |_| .__/ \__|
                     | |
                     |_|
EOF
}

usage() {
  cat <<EOF
$(show_figlet)

Terrascript is a thin wrapper of Terraform that have ability to be aware with changes on a git local-repository

Terrascript is able to discover your terraform task on your git local-repository using "git-diff" triple-dot approach,
and check the terraform task in one of following condition:
* Added
* Modified/Renamed
* Deleted

USAGE:

  terrascript validate     : do terraform validate with a more power
  terrascript plan         : do terraform plan with a more power
  terrascript apply        : do terraform apply with a more power
  terrascript version      : show terrascript version

  terrascript -h,--help    : show this message

ENVIRONMENT VARIABLES:
  \$TF_BIN                    : is a terraform binary path location, MUST be executable otherwise resulting non-zero status code. Default to "/usr/local/bin/terraform"
  \$TF_PREVIOUS_HEAD          : is a previous head commit to be compared with current branch head commit. Default to "HEAD^1"
  \$TF_BACKEND                : is a terraform backend provider. Default to "aws"
  \$TF_BACKEND_BUCKET         : is a terraform backend bucket
  \$TF_BACKEND_DYNAMODB_TABLE : is a terraform backend dynamodb table as terraform-lock storage
  \$TF_ASSIGNERS              : is a base64-encoded string that contains a list of assigners (separated by newline) that able to execute terrascript
  \$TF_PLUGIN_CACHE_DIR       : is a terraform plugin cache dir based on official docs. Default to "/tmp/terraform/plugin-cache"
EOF
}

select_backend() {

  if [ "$1" == "aws" ]; then
    export TF_BACKEND_CONFIG="-backend-config=\"bucket=\$TF_BACKEND_BUCKET\""
    export TF_BACKEND_CONFIG+=" -backend-config=\"dynamodb_table=\$TF_BACKEND_DYNAMODB_TABLE\""
    export TF_BACKEND_CONFIG+=" -backend-config=\"key=\$TF_BACKEND_STATE\""
  elif [ "$1" == "gcs" ]; then
    export TF_BACKEND_CONFIG="-backend-config=\"bucket=\$TF_BACKEND_BUCKET\""
    export TF_BACKEND_CONFIG+=" -backend-config=\"prefix=\$TF_BACKEND_STATE\""
  fi
}

assigner_check() {
  assigners=$(echo "${TF_ASSIGNERS:-}" | base64 -d)

  if ! grep "${GITLAB_USER_LOGIN:-}" <<<"${assigners}"; then
    err "You are not allowed to run this operation\nPlease contact one of the repository maintainers below:\n${WHITE}${assigners}${NC}"
    exit 1
  fi

}

execute() {
  local basedir
  local cachedir
  local target_dirs
  local action
  local destroy

  basedir="$(git rev-parse --show-toplevel)"
  cachedir=$(
    cachedir="${TF_PLUGIN_CACHE_DIR:-/tmp/terraform/plugin-cache}"
    mkdir -p "${cachedir}"
    echo "${cachedir}"
  )

  target_dirs=$1
  action=$2

  if [ -n "${3:-}" ]; then destroy="-destroy"; fi

  for tfpath in ${target_dirs}; do
    dir_with_files=$(find "${basedir}"/"${tfpath}" -maxdepth 1 -type f 2>/dev/null)
    if [ -n "${dir_with_files}" ]; then
      echo -e "[${BLUE}START${NC}]: ${WHITE}Starting Terraform task at${NC} ${LYELLOW}${tfpath}${NC}"

      (
        export TF_BACKEND_STATE=${tfpath%\/}/terraform.tfstate
        export TF_PLUGIN_CACHE_DIR=${cachedir}
        export TF_PLANFILE="/tmp/target.tfplan"

        TF_INIT="${TF_BIN} init"
        TF_VALIDATE="${TF_BIN} validate"
        TF_PLAN="${TF_BIN} plan -out ${TF_PLANFILE}"
        TF_APPLY="${TF_BIN} apply ${TF_PLANFILE}"

        cd "${basedir}"/"${tfpath}"
        sleep 1

        case ${action} in
          validate)
            eval "${TF_INIT} -backend=false"
            eval "${TF_VALIDATE}"
            ;;
          plan)
            eval "${TF_INIT} ${TF_BACKEND_CONFIG}"
            eval "${TF_PLAN} ${destroy}"
            ;;
          apply)
            eval "${TF_INIT} ${TF_BACKEND_CONFIG}"
            eval "${TF_PLAN} ${destroy}"
            eval "${TF_APPLY}"
            ;;
        esac
      ) || ERRORS+=("${tfpath}")

      echo -e "[${BLUE}DONE${NC}]: ${WHITE}Terraform task at ${LYELLOW}$tfpath\n${NC} is completed\n${NC}"
    fi
  done
}

setup() {
  local repo
  local action
  local added_dirs
  local modified_dirs
  local deleted_dirs

  action=$1
  repo="$(basename "$(git rev-parse --show-toplevel)")"

  # Git commit variables
  CURRENT_HEAD="$(git rev-parse HEAD)"
  PREVIOUS_HEAD="${TF_PREVIOUS_HEAD:-$(git rev-parse HEAD^1)}"

  # Select backend and forming -backend-config arguments for terraform
  select_backend "${TF_BACKEND:-aws}"

  # Perform scanning into repository for any changes in one of the following states
  # > Adding
  # > Modified
  # > Deleted

  show_title_setup "STARTING TERRAFORM TASK" "${repo}"

  added_dirs=$(git --no-pager diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=A -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
  modified_dirs=$(git --no-pager diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=M -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')
  deleted_dirs=$(git --no-pager diff "${PREVIOUS_HEAD}"..."${CURRENT_HEAD}" --dirstat-by-file --diff-filter=D -- '*.tf' '*.tfvars' '*.json' | awk '{ print $2 }')

  if [ -n "${added_dirs}" ]; then
    execute "${added_dirs[@]}" "${action}"
  fi

  if [ -n "${modified_dirs}" ]; then
    execute "${modified_dirs[@]}" "${action}"
  fi

  if [ -n "${deleted_dirs}" ]; then
    git checkout "${PREVIOUS_HEAD}" >/dev/null 2>&1
    execute "${deleted_dirs[@]}" "${action}" destroy
    git checkout "${CURRENT_HEAD}" >/dev/null 2>&1
  fi

  show_title_setup "END OF TERRAFORM TASK" "${repo}"

  if [ ${#ERRORS[@]} -eq 0 ]; then
    summary_title="SUMMARY REPORT"
    echo -e "${LGREEN}$(print_line "${#summary_title}")${NC}"
    echo -e "${LGREEN}${summary_title}${NC}"
    echo -e "${LGREEN}$(print_line "${#summary_title}")${NC}"

    echo -e "${YELLOW}Added${NC} Resources:\t $(wc -w <<< "${added_dirs}") resources"
    echo -e "${GREEN}Modified${NC} Resources:\t $(wc -w <<< "${modified_dirs}") resources"
    echo -e "${RED}Deleted${NC} Resources:\t $(wc -w <<< "${deleted_dirs}") resources"
    echo -e ""

    for path in $added_dirs; do
      echo -e "[${YELLOW}ADDED${NC}]: added resource ${YELLOW}${path}${NC}"
    done

    for path in $modified_dirs; do
      echo -e "[${GREEN}MODIFIED${NC}]: modified resource ${GREEN}${path}${NC}"
    done

    for path in $deleted_dirs; do
      echo -e "[${RED}DELETED${NC}]: deleted resource ${RED}${path}${NC}"
    done
  else
    err "These resource failed terrascript ${RED}${ERRORS[*]}${NC}"
    exit 1
  fi
}

main() {
  local CONTINUE=1

  command_check "git" "${TF_BIN}"

  if [[ $# -eq 0 ]]; then
    usage
  else
    for arg in "$@"; do
      case $arg in
        validate)
          setup "validate"
          CONTINUE=0
          ;;
        plan)
          setup "plan"
          CONTINUE=0
          ;;
        apply)
          assigner_check
          setup "apply"
          CONTINUE=0
          ;;
        --help | -h)
          usage
          CONTINUE=0
          ;;
        version)
          show_version
          CONTINUE=0
          ;;
        *)
          err "Unexpected argument for ${YELLOW}'$arg'${NC}!"
          break
          ;;
      esac
    done
  fi

  exit $CONTINUE
}

main "$@"
